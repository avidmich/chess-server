require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe FeedbacksController do

  # This should return the minimal set of attributes required to create a valid
  # Feedback. As you add validations to Feedback, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) { { type:'type', memo: 'memo', app_version: 'app_version', os_version: 'os_version', sdk_version: 'sdk_version', manufacturer: 'manufacturer', model: 'model', username: 'username', email:'email'} }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # FeedbacksController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  before(:each) do
    controller.stub(:authenticate).and_return(true)
    request.env['HTTP_ACCEPT'] = 'application/json'
  end

  describe 'GET index' do
    it 'assigns all feedbacks as @feedbacks' do
      feedback = Feedback.create! valid_attributes
      get :index, {}, valid_session
      assigns(:feedbacks).should eq([feedback])
    end
  end

  describe 'GET show' do
    it 'assigns the requested feedback as @feedback' do
      feedback = Feedback.create! valid_attributes
      get :show, {:id => feedback.to_param}, valid_session
      assigns(:feedback).should eq(feedback)
    end
  end

  describe 'POST create' do
    describe 'with valid params' do
      it 'creates a new Feedback' do
        expect {
          post :create, {feedback: valid_attributes}, valid_session
        }.to change(Feedback, :count).by(1)
      end

      it 'assigns a newly created feedback as @feedback and checks that it is persisted' do
        post :create, {:feedback => valid_attributes}, valid_session
        assigns(:feedback).should be_a(Feedback)
        assigns(:feedback).should be_persisted
      end

      it 'responses 201 Created' do
        post :create, {feedback: valid_attributes}, valid_session
        response.status.should == 201
      end
    end

    describe 'with invalid params' do
      it 'assigns a newly created but unsaved feedback as @feedback' do
        # Trigger the behavior that occurs when invalid params are submitted
        Feedback.any_instance.stub(:save).and_return(false)
        post :create, {:feedback => { 'type' => 'invalid value'}}, valid_session
        assigns(:feedback).should be_a_new(Feedback)
      end

      it 'responses 422 Unprocessable entity' do
        # Trigger the behavior that occurs when invalid params are submitted
        Feedback.any_instance.stub(:save).and_return(false)
        post :create, {:feedback => { 'type' => 'invalid value'}}, valid_session
        response.status.should == 422
      end
    end
  end



  describe 'DELETE destroy' do
    it 'destroys the requested feedback' do
      feedback = Feedback.create! valid_attributes
      expect {
        delete :destroy, {:id => feedback.to_param}, valid_session
      }.to change(Feedback, :count).by(-1)
    end

    it 'responses 200 OK' do
      feedback = Feedback.create! valid_attributes
      delete :destroy, {:id => feedback.to_param}, valid_session
      response.status.should eq(200)
    end
  end

end
