require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe DevicesController do

  # This should return the minimal set of attributes required to create a valid
  # Device. As you add validations to Device, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) { { registration_id: 'RegistrationIDstring', user_id: 1 } }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # DevicesController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  before(:each) do
    controller.stub(:authenticate).and_return(true)
    request.env["HTTP_ACCEPT"] = 'application/json'
  end

  describe 'POST register' do
    describe 'with valid params' do
      it 'creates a new Device' do
        expect {
          post :register, {user_id: 1, device: valid_attributes}, valid_session
        }.to change(Device, :count).by(1)
      end

      it 'assigns a newly created device as @device' do
        post :register, {user_id: 1, device: valid_attributes}, valid_session
        assigns(:device).should be_a(Device)
        assigns(:device).should be_persisted
      end

      it 'redirects to the created device' do
        post :register, {user_id: 1, device: valid_attributes}, valid_session
        response.status.should == 201
      end
    end

    describe 'with invalid params' do
      it 'assigns a newly created but unsaved device as @device' do
        # Trigger the behavior that occurs when invalid params are submitted
        Device.any_instance.stub(:save).and_return(false)
        post :register, {user_id: 1, device:  { 'registration_id' => 'invalid value'}}, valid_session
        assigns(:device).should be_a_new(Device)
      end

      it "re-renders the 'new' template" do
        # Trigger the behavior that occurs when invalid params are submitted
        Device.any_instance.stub(:save).and_return(false)
        post :register, {user_id: 1, device: { 'registration_id' => 'invalid value'}}, valid_session
        response.status.should == 422
      end
    end
  end

  describe 'POST Unregister' do
    describe 'with valid params' do
      it "destroys the requested device" do
        device = Device.create! valid_attributes
        expect {
          post :unregister, {user_id: device.user_id, registration_id: device.registration_id }, valid_session
        }.to change(Device, :count).by(-1)
      end

      it 'assigns the requested device as @device' do
        device = Device.create! valid_attributes
        post :unregister, {user_id: valid_attributes[:user_id], registration_id: valid_attributes[:registration_id]}, valid_session
        assigns(:device).should eq(device)
      end

      it 'responses 200 OK with unregistered device JSON in response body' do
        device = Device.create! valid_attributes
        post :unregister, {user_id: valid_attributes[:user_id], registration_id: valid_attributes[:registration_id]}, valid_session
        response.status.should == 200
        JSON.parse(response.body)['id'].should_not eq(nil)
      end
    end

    describe 'with invalid params' do
      it 'assigns the device as @device' do
        device = Device.create! valid_attributes
        # Trigger the behavior that occurs when invalid params are submitted
        Device.any_instance.stub(:save).and_return(false)
        post :unregister, {user_id: valid_attributes[:user_id], registration_id: 'invalid value'}, valid_session
        assigns(:device).should eq(nil)
      end

      it "re-renders the 'edit' template" do
        device = Device.create! valid_attributes
        # Trigger the behavior that occurs when invalid params are submitted
        Device.any_instance.stub(:save).and_return(false)
        post :unregister, {user_id: valid_attributes[:user_id], registration_id: 'invalid value'}, valid_session
        response.status.should == 422
      end
    end
  end

end
